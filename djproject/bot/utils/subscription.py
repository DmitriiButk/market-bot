from typing import List, Dict, Any, Union

from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram import Bot

from . import logger


async def check_user_subscribed(bot: Bot, user_id: int, chat_id: Union[str, int]) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª –∏–ª–∏ –≥—Ä—É–ø–ø—É.

    –§—É–Ω–∫—Ü–∏—è —É—á–∏—Ç—ã–≤–∞–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ –∫–∞–Ω–∞–ª–æ–≤
    (—á–∏—Å–ª–æ–≤–æ–π ID –∏–ª–∏ —é–∑–µ—Ä–Ω–µ–π–º —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º '@').
    –¢–∞–∫–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏, —Ç–∞–∫–∏–µ –∫–∞–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–ø–∏—Å–∫–∞
    —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –∫–∞–Ω–∞–ª–æ–≤.

    Args:
        bot: –û–±—ä–µ–∫—Ç –±–æ—Ç–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è Telegram API –∑–∞–ø—Ä–æ—Å–æ–≤
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø–æ–¥–ø–∏—Å–∫—É –∫–æ—Ç–æ—Ä–æ–≥–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º
        chat_id: ID –∫–∞–Ω–∞–ª–∞/–≥—Ä—É–ø–ø—ã –∏–ª–∏ —é–∑–µ—Ä–Ω–µ–π–º —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º '@'

    Returns:
        bool: True, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
    """
    try:
        if isinstance(chat_id, str) and chat_id.startswith('@'):
            try:
                chat_info = await bot.get_chat(chat_id)
                chat_id = chat_info.id
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ ID –∫–∞–Ω–∞–ª–∞ {chat_id}: {e}")
                return False

        member = await bot.get_chat_member(chat_id=chat_id, user_id=user_id)
        return member.status in ['creator', 'administrator', 'member']
    except Exception as e:
        error_message = str(e)

        if "member list is inaccessible" in error_message:
            return True

        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–∞ –∫–∞–Ω–∞–ª {chat_id}: {e}")

        return False


async def get_subscription_status(
        bot: Bot,
        user_id: int,
        channels: List[Dict[str, Any]]
) -> List[Dict[str, Any]]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –≤—Å–µ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã/–≥—Ä—É–ø–ø—ã.

    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–∞–∂–¥—ã–π –∫–∞–Ω–∞–ª –∏–∑ —Å–ø–∏—Å–∫–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤,
    –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω.

    Args:
        bot: –û–±—ä–µ–∫—Ç –±–æ—Ç–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø–æ–¥–ø–∏—Å–∫–∏ –∫–æ—Ç–æ—Ä–æ–≥–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º
        channels: –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–∞–Ω–∞–ª–∞—Ö. –ö–∞–∂–¥—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–æ–ª–∂–µ–Ω
                 —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–∞–∫ –º–∏–Ω–∏–º—É–º –∫–ª—é—á–∏ "chat_id", "name" –∏ "invite_link"

    Returns:
        List[Dict[str, Any]]: –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–∞–Ω–∞–ª–∞—Ö,
                             –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω
    """
    not_subscribed: List[Dict[str, Any]] = []

    for channel in channels:
        try:
            is_subscribed = await check_user_subscribed(bot, user_id, channel["chat_id"])
            if not is_subscribed:
                not_subscribed.append(channel)
        except KeyError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫–∞–Ω–∞–ª–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á {e} | "
                         f"–î–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª–∞: {channel}")
        except Exception as e:
            logger.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} "
                         f"–Ω–∞ –∫–∞–Ω–∞–ª {channel.get('name', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}: {e}")

    return not_subscribed


def get_subscription_markup(not_subscribed_channels: List[Dict[str, Any]]) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –Ω–µ–ø—Ä–æ–π–¥–µ–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã.

    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏-—Å—Å—ã–ª–∫–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–∞–Ω–∞–ª–∞,
    –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è, –∏ –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏.

    Args:
        not_subscribed_channels: –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–∞–Ω–∞–ª–∞—Ö.
                               –ö–∞–∂–¥—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–ª—é—á–∏
                               "name" –∏ "invite_link"

    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏-—Å—Å—ã–ª–∫–∞–º–∏ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
                             –∏ –∫–Ω–æ–ø–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
    """
    try:
        builder = InlineKeyboardBuilder()

        for channel in not_subscribed_channels:
            if "name" not in channel or "invite_link" not in channel:
                logger.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–ª—é—á–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {channel}")
                continue

            builder.add(InlineKeyboardButton(
                text=f"‚úÖ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ {channel['name']}",
                url=channel['invite_link']
            ))

        builder.add(InlineKeyboardButton(
            text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É",
            callback_data="check_subscription"
        ))

        builder.adjust(1)

        return builder.as_markup()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        builder = InlineKeyboardBuilder()
        builder.add(InlineKeyboardButton(
            text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É",
            callback_data="check_subscription"
        ))
        return builder.as_markup()
