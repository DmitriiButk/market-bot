from typing import Optional, Callable
from aiogram import types, Router
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import traceback

from djproject.bot.utils.config import MAIN_MENU_CALLBACK, CART_CALLBACK, CATALOG_CALLBACK, DEFAULT_ERROR_MESSAGE
from djproject.bot.utils.logger import logger

catalog_router = Router()


def create_error_keyboard() -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–µ.

    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ –∫–æ—Ä–∑–∏–Ω—É
    """
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data=MAIN_MENU_CALLBACK)],
        [InlineKeyboardButton(text="üõí –ö–æ—Ä–∑–∏–Ω–∞", callback_data=CART_CALLBACK)]
    ])


def get_back_button(subcategory_id: Optional[int] = None, category_id: Optional[int] = None) -> str:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç callback_data –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥' –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞.

    Args:
        subcategory_id: ID –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        category_id: ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π

    Returns:
        str: callback_data –¥–ª—è –∫–Ω–æ–ø–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞
    """
    if subcategory_id:
        return f"category_{subcategory_id}"
    elif category_id:
        return CATALOG_CALLBACK
    return CATALOG_CALLBACK


async def safe_callback_execution(
        callback: types.CallbackQuery,
        action: Callable,
        error_message: str = DEFAULT_ERROR_MESSAGE
) -> None:
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ —Å –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∏—Å–∫–ª—é—á–µ–Ω–∏–π –¥–ª—è callback-–∑–∞–ø—Ä–æ—Å–æ–≤.

    Args:
        callback: –û–±—ä–µ–∫—Ç callback_query –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        action: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        error_message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    try:
        await action()
    except Exception as e:
        user = callback.from_user
        callback_data = callback.data
        error_stack = traceback.format_exc()

        logger.error(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback '{callback_data}' –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID:{user.id} ({user.full_name}): "
            f"{e}\n{error_stack}"
        )

        await callback.answer(error_message)
