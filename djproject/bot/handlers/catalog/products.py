from typing import Optional, List, Dict, Any

from aiogram import types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from .base import catalog_router, safe_callback_execution, get_back_button
from ...db import get_products, get_category_name, get_subcategory_name, get_product
from ...utils.config import PRODUCTS_PER_PAGE
from ...utils.logger import logger


async def show_products(callback: types.CallbackQuery, category_id: Optional[int] = None,
                        subcategory_id: Optional[int] = None, page: int = 1) -> None:
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–ª–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏.

    –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–æ–≤–∞—Ä—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å —É—á–µ—Ç–æ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏/–ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∏—Ö –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π.

    Args:
        callback: –û–±—ä–µ–∫—Ç callback_query –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        category_id: ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤
        subcategory_id: ID –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤
        page: –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ (–Ω–∞—á–∏–Ω–∞—è —Å 1)
    """
    try:
        products: List[Dict[str, Any]]
        total_products: int
        products, total_products = await get_products(
            category_id=category_id,
            subcategory_id=subcategory_id,
            page=page,
            per_page=PRODUCTS_PER_PAGE
        )

        if not products:
            back_button: str = get_back_button(subcategory_id, category_id)

            await callback.message.edit_text(
                "–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=back_button)],
                    [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                ])
            )
            return

        title: str = "–¢–æ–≤–∞—Ä—ã:"
        if category_id:
            title = f"–¢–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ¬´{await get_category_name(category_id)}¬ª:"
        elif subcategory_id:
            title = f"–¢–æ–≤–∞—Ä—ã –≤ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ¬´{await get_subcategory_name(subcategory_id)}¬ª:"

        total_pages: int = (total_products + PRODUCTS_PER_PAGE - 1) // PRODUCTS_PER_PAGE
        pagination_buttons: List[List[InlineKeyboardButton]] = []

        if total_pages > 1:
            pagination_row: List[InlineKeyboardButton] = []

            if page > 1:
                pagination_row.append(InlineKeyboardButton(
                    text="‚¨ÖÔ∏è",
                    callback_data=f"products_page_{category_id or 0}_{subcategory_id or 0}_{page - 1}"
                ))

            pagination_row.append(InlineKeyboardButton(
                text=f"{page}/{total_pages}",
                callback_data="ignore"
            ))

            if page < total_pages:
                pagination_row.append(InlineKeyboardButton(
                    text="‚û°Ô∏è",
                    callback_data=f"products_page_{category_id or 0}_{subcategory_id or 0}_{page + 1}"
                ))

            pagination_buttons.append(pagination_row)

        back_button: str = get_back_button(subcategory_id, category_id)

        product_buttons: List[List[InlineKeyboardButton]] = [
            [InlineKeyboardButton(
                text=f"{product['name']} - {product['price']} ‚ÇΩ",
                callback_data=f"product_{product['id']}"
            )] for product in products
        ]

        kb: InlineKeyboardMarkup = InlineKeyboardMarkup(
            inline_keyboard=product_buttons + pagination_buttons + [
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=back_button)],
                [InlineKeyboardButton(text="üõí –ö–æ—Ä–∑–∏–Ω–∞", callback_data="cart")],
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]
        )

        await callback.message.edit_text(title, reply_markup=kb)

    except Exception as e:
        logger.error(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤: {e} | "
            f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_id}, –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è: {subcategory_id}, –°—Ç—Ä–∞–Ω–∏—Ü–∞: {page}"
        )
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–æ–≤–∞—Ä–æ–≤")


@catalog_router.callback_query(lambda c: c.data.startswith("products_page_"))
async def handle_products_pagination(callback: types.CallbackQuery) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–∞–≥–∏–Ω–∞—Ü–∏—é —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –ø—Ä–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º.

    Args:
        callback: –û–±—ä–µ–∫—Ç callback_query —Å –¥–∞–Ω–Ω—ã–º–∏ –æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö –≤ —Ñ–æ—Ä–º–∞—Ç–µ
                "products_page_{category_id}_{subcategory_id}_{page}"
    """

    async def process_pagination():
        try:
            _, category_id, subcategory_id, page_str = callback.data.split("_")[1:]

            category_id_int: Optional[int] = int(category_id) if category_id != '0' else None
            subcategory_id_int: Optional[int] = int(subcategory_id) if subcategory_id != '0' else None
            page: int = int(page_str)

            await show_products(callback, category_id_int, subcategory_id_int, page)
        except ValueError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏: {e} | –î–∞–Ω–Ω—ã–µ: {callback.data}")
            raise
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Ç–æ–≤–∞—Ä–∞–º: {e}")
            raise

    await safe_callback_execution(
        callback,
        process_pagination,
        "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Ç–æ–≤–∞—Ä–∞–º"
    )


@catalog_router.callback_query(lambda c: c.data.startswith("product_"))
async def show_product_detail(callback: types.CallbackQuery) -> None:
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ç–æ–≤–∞—Ä–µ.

    Args:
        callback: –û–±—ä–µ–∫—Ç callback_query —Å –¥–∞–Ω–Ω—ã–º–∏ –æ —Ç–æ–≤–∞—Ä–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "product_{product_id}"
    """

    async def display_product():
        try:
            product_id: int = int(callback.data.split("_")[1])
            product: Dict[str, Any] = await get_product(product_id)

            if not product:
                logger.error(f"–¢–æ–≤–∞—Ä —Å ID {product_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")
                await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return

            category_id = product.get('category_id')
            subcategory_id = product.get('subcategory_id')
            back_data = f"back_to_products_{category_id or 0}_{subcategory_id or 0}"

            kb: InlineKeyboardMarkup = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="üõí –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É",
                                          callback_data=f"add_to_cart_{product_id}")],
                    [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–æ–≤–∞—Ä–∞–º", callback_data=back_data)],
                    [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                ]
            )

            description = (f"<b>{product['name']}</b>\n\n"
                           f"{product['description']}\n\n"
                           f"<b>–¶–µ–Ω–∞: {product['price']} ‚ÇΩ</b>")

            if product.get('image'):
                await callback.message.delete()
                await callback.message.answer_photo(
                    photo=product['image'],
                    caption=description,
                    reply_markup=kb,
                    parse_mode="HTML"
                )
            else:
                await callback.message.edit_text(
                    description,
                    reply_markup=kb,
                    parse_mode="HTML"
                )

        except ValueError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ ID —Ç–æ–≤–∞—Ä–∞: {e} | –î–∞–Ω–Ω—ã–µ: {callback.data}")
            raise
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ: {e} | –î–∞–Ω–Ω—ã–µ: {callback.data}")
            raise

    await safe_callback_execution(
        callback,
        display_product,
        "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ"
    )
    await callback.answer()


@catalog_router.callback_query(lambda c: c.data.startswith("back_to_products_"))
async def back_to_products(callback: types.CallbackQuery) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É —Ç–æ–≤–∞—Ä–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–ª–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏.

    Args:
        callback: –û–±—ä–µ–∫—Ç callback_query —Å –¥–∞–Ω–Ω—ã–º–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ
                "back_to_products_{category_id}_{subcategory_id}"
    """

    async def navigate_back():
        try:
            parts: List[str] = callback.data.split("_")
            category_id: Optional[int] = int(parts[3]) if parts[3] != '0' else None
            subcategory_id: Optional[int] = int(parts[4]) if len(parts) > 4 and parts[4] != '0' else None

            await show_products(callback, category_id, subcategory_id, page=1)
        except IndexError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ callback-–¥–∞–Ω–Ω—ã—Ö: {e} | –î–∞–Ω–Ω—ã–µ: {callback.data}")
            raise
        except ValueError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–ª–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {e} | –î–∞–Ω–Ω—ã–µ: {callback.data}")
            raise
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ —Å–ø–∏—Å–∫—É —Ç–æ–≤–∞—Ä–æ–≤: {e}")
            raise

    await safe_callback_execution(
        callback,
        navigate_back,
        "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ —Å–ø–∏—Å–∫—É —Ç–æ–≤–∞—Ä–æ–≤"
    )
