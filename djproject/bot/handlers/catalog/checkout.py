import uuid
import re
from typing import Dict, Any, List

from aiogram import types
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from ...utils.states import CatalogStates
from ...services.payments import TinkoffPayment
from ...utils.config import TINKOFF_TERMINAL_KEY, TINKOFF_PASSWORD
from .base import catalog_router, safe_callback_execution
from ...db import get_cart_items, create_order, save_order_to_google_sheets, update_order_payment_info
from ...utils.logger import logger


@catalog_router.callback_query(lambda c: c.data == "checkout")
async def checkout(callback: types.CallbackQuery) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞.

    Args:
        callback: –û–±—ä–µ–∫—Ç callback_query –æ—Ç –∫–Ω–æ–ø–∫–∏ "–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑"
    """

    async def start_checkout():
        try:
            user_id: int = callback.from_user.id
            cart_items: List[Dict[str, Any]] = await get_cart_items(user_id)

            if not cart_items:
                await callback.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞")
                return

            await callback.message.edit_text(
                "–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –Ω–∞–º –Ω—É–∂–Ω—ã –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏.\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ", callback_data="enter_delivery_data")],
                    [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –∫–æ—Ä–∑–∏–Ω—É", callback_data="cart")],
                    [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                ])
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ID:{callback.from_user.id}: {e}")
            raise

    await safe_callback_execution(
        callback,
        start_checkout,
        "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞"
    )
    await callback.answer()


@catalog_router.callback_query(lambda c: c.data == "enter_delivery_data")
async def enter_delivery_data(callback: types.CallbackQuery, state: FSMContext) -> None:
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–º—è –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞.

    Args:
        callback: –û–±—ä–µ–∫—Ç callback_query –æ—Ç –∫–Ω–æ–ø–∫–∏ "–í–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ"
        state: –û–±—ä–µ–∫—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """

    async def request_name():
        try:
            await callback.message.edit_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="cart")]
                ])
            )
            await state.set_state(CatalogStates.waiting_for_name)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID:{callback.from_user.id}: {e}")
            raise

    await safe_callback_execution(
        callback,
        request_name,
        "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –¥–∞–Ω–Ω—ã—Ö"
    )
    await callback.answer()


@catalog_router.message(CatalogStates.waiting_for_name)
async def process_name(message: types.Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞.

    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∏–º–µ–Ω–µ–º
        state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞
    """
    await state.update_data(name=message.text)
    await message.answer(
        "–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cart")]
        ])
    )
    await state.set_state(CatalogStates.waiting_for_phone)


@catalog_router.message(CatalogStates.waiting_for_phone)
async def process_phone(message: types.Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π.

    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞
    """
    try:
        phone: str = message.text.strip()
        cleaned_phone: str = re.sub(r'\D', '', phone)

        if not re.match(r'^(7|8)?\d{10}$', cleaned_phone):
            logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID:{message.from_user.id} –≤–≤–µ–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone}")
            await message.answer(
                "–í–≤–µ–¥–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX –∏–ª–∏ 8XXXXXXXXXX:",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cart")]
                ])
            )
            return

        if cleaned_phone.startswith('8'):
            cleaned_phone = '+7' + cleaned_phone[1:]
        elif cleaned_phone.startswith('7'):
            cleaned_phone = '+' + cleaned_phone
        else:
            cleaned_phone = '+7' + cleaned_phone

        await state.update_data(phone=cleaned_phone)
        await message.answer(
            "–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cart")]
            ])
        )
        await state.set_state(CatalogStates.waiting_for_address)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID:{message.from_user.id}: {e}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()


@catalog_router.message(CatalogStates.waiting_for_address)
async def process_address(message: types.Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∞–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞.

    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∞–¥—Ä–µ—Å–æ–º –¥–æ—Å—Ç–∞–≤–∫–∏
        state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞
    """
    wait_message = None
    try:
        wait_message = await message.answer("‚è≥ –ó–∞–∫–∞–∑ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")

        user_data: Dict[str, Any] = await state.update_data(address=message.text)
        user_id: int = message.from_user.id

        cart_items: List[Dict[str, Any]] = await get_cart_items(user_id)

        if not cart_items:
            logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID:{user_id} –ø—ã—Ç–∞–µ—Ç—Å—è –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ —Å –ø—É—Å—Ç–æ–π –∫–æ—Ä–∑–∏–Ω–æ–π")
            await wait_message.delete()
            await message.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞. –ó–∞–∫–∞–∑ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω.")
            await state.clear()
            return

        order_details: str = "–í–∞—à –∑–∞–∫–∞–∑:\n\n"
        total_sum: float = 0

        for item in cart_items:
            item_total: float = item['price'] * item['quantity']
            order_details += f"‚Ä¢ {item['name']} - {item['price']} ‚ÇΩ x {item['quantity']} = {item_total} ‚ÇΩ\n"
            total_sum += item_total

        order_details += f"\n–ò—Ç–æ–≥–æ: {total_sum} ‚ÇΩ\n\n"
        order_details += f"–ò–º—è: {user_data['name']}\n"
        order_details += f"–¢–µ–ª–µ—Ñ–æ–Ω: {user_data['phone']}\n"
        order_details += f"–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {user_data['address']}"

        try:
            order_id: int = await create_order(
                user_id=user_id,
                items=cart_items,
                name=user_data['name'],
                phone=user_data['phone'],
                address=user_data['address'],
                total_amount=total_sum
            )
        except Exception as db_error:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ –≤ –ë–î –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID:{user_id}: {db_error}")
            raise

        try:
            await save_order_to_google_sheets(order_id)
        except Exception as sheets_error:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ #{order_id} –≤ Google Sheets: {sheets_error}")

        try:
            payment_system = TinkoffPayment(
                terminal_key=TINKOFF_TERMINAL_KEY,
                password=TINKOFF_PASSWORD
            )

            payment_id: str = f"order_{order_id}_{uuid.uuid4().hex[:8]}"
            payment_result: Dict[str, Any] = await payment_system.create_payment(
                order_id=payment_id,
                amount=total_sum,
                description=f"–ó–∞–∫–∞–∑ #{order_id} –≤ –Ω–∞—à–µ–º –º–∞–≥–∞–∑–∏–Ω–µ",
                customer_phone=user_data['phone'],
                success_url="https://t.me/your_bot_username"  # URL –±–æ—Ç–∞
            )
        except Exception as payment_error:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order_id}: {payment_error}")
            raise

        await wait_message.delete()
        wait_message = None

        if payment_result.get("Success"):
            payment_url: str = payment_result.get("PaymentURL")

            try:
                await update_order_payment_info(
                    order_id=order_id,
                    payment_id=payment_id,
                    payment_url=payment_url
                )
            except Exception as update_error:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–ª–∞—Ç–µ–∂–µ –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order_id}: {update_error}")

            await message.answer(
                f"–ó–∞–∫–∞–∑ #{order_id} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n"
                f"–î–ª—è –æ–ø–ª–∞—Ç—ã –∑–∞–∫–∞–∑–∞ –Ω–∞ —Å—É–º–º—É {total_sum} ‚ÇΩ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ:\n",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –∑–∞–∫–∞–∑", url=payment_url)],
                    [InlineKeyboardButton(text="üõç –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞—Ç–∞–ª–æ–≥", callback_data="catalog")],
                    [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                ])
            )
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ —à–ª—é–∑–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order_id}: {payment_result}")
            await message.answer(
                f"–ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å –ø–ª–∞—Ç–µ–∂–Ω—ã–º —à–ª—é–∑–æ–º.\n"
                f"–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –æ–ø–ª–∞—Ç—ã.\n\n"
                f"–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞:\n{order_details}",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üõç –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞—Ç–∞–ª–æ–≥", callback_data="catalog")],
                    [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                ])
            )

    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ID:{message.from_user.id}: {e}")
        if wait_message:
            try:
                await wait_message.delete()
            except Exception as delete_error:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ–∂–∏–¥–∞–Ω–∏–∏: {delete_error}")

        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üõí –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–æ—Ä–∑–∏–Ω—É", callback_data="cart")],
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
        )

    await state.clear()
