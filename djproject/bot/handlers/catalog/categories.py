from typing import List, Dict, Any
from aiogram import types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from .products import show_products
from .base import catalog_router, safe_callback_execution
from ...db import get_product_categories, get_subcategories, get_category_name
from ...utils.logger import logger


@catalog_router.callback_query(lambda c: c.data == "catalog")
async def show_categories(callback: types.CallbackQuery) -> None:
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ.

    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é
    —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º. –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –±–∞–∑–µ,
    –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.

    Args:
        callback: –û–±—ä–µ–∫—Ç callback_query, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ "–ö–∞—Ç–∞–ª–æ–≥"

    Raises:
        Exception: –ü—Ä–∏ –æ—à–∏–±–∫–µ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
    """
    user_id = callback.from_user.id

    async def display_categories():
        try:
            categories: List[Dict[str, Any]] = await get_product_categories()

            if not categories:
                await callback.message.edit_text(
                    "–í –∫–∞—Ç–∞–ª–æ–≥–µ –ø–æ–∫–∞ –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–æ–≤–∞—Ä–æ–≤.",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                    ])
                )
                return

            kb: InlineKeyboardMarkup = InlineKeyboardMarkup(
                inline_keyboard=[
                                    [InlineKeyboardButton(text=category['name'],
                                                          callback_data=f"category_{category['id']}")]
                                    for category in categories
                                ] + [
                                    [InlineKeyboardButton(text="üõí –ö–æ—Ä–∑–∏–Ω–∞", callback_data="cart")],
                                    [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                                ]
            )

            await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤:", reply_markup=kb)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            raise

    await safe_callback_execution(
        callback,
        display_categories,
        "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"
    )
    await callback.answer()


@catalog_router.callback_query(lambda c: c.data.startswith("category_"))
async def show_subcategories_or_products(callback: types.CallbackQuery) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–ª–∏ —Ç–æ–≤–∞—Ä—ã.

    –ò–∑–≤–ª–µ–∫–∞–µ—Ç ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –¥–∞–Ω–Ω—ã—Ö callback, –∑–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π
    –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –ï—Å–ª–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –µ—Å—Ç—å - –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏—Ö —Å–ø–∏—Å–∫–æ–º —Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º–∏
    –∫–Ω–æ–ø–∫–∞–º–∏. –ï—Å–ª–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–µ—Ç - –Ω–∞–ø—Ä—è–º—É—é –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ç–æ–≤–∞—Ä—ã –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.

    Args:
        callback: –û–±—ä–µ–∫—Ç callback_query, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                 –≤ —Ñ–æ—Ä–º–∞—Ç–µ "category_{category_id}"

    Raises:
        ValueError: –ü—Ä–∏ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ —á–∏—Å–ª–æ
        Exception: –ü—Ä–∏ –æ—à–∏–±–∫–µ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
    """
    user_id = callback.from_user.id
    category_id = int(callback.data.split("_")[1])

    async def process_category():
        try:
            subcategories: List[Dict[str, Any]] = await get_subcategories(category_id)
            category_name: str = await get_category_name(category_id)

            if subcategories:
                kb: InlineKeyboardMarkup = InlineKeyboardMarkup(
                    inline_keyboard=[
                                        [InlineKeyboardButton(text=subcat['name'],
                                                              callback_data=f"subcat_{subcat['id']}")]
                                        for subcat in subcategories
                                    ] + [
                                        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="catalog")],
                                        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                                    ]
                )

                await callback.message.edit_text(f"–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ ¬´{category_name}¬ª:", reply_markup=kb)
                return

            await show_products(callback, category_id=category_id)

        except Exception as e:
            logger.error(
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ID:{category_id}, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID:{user_id}: {e}")
            raise

    await safe_callback_execution(
        callback,
        process_category,
        "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π"
    )
    await callback.answer()


@catalog_router.callback_query(lambda c: c.data.startswith("subcat_"))
async def show_subcategory_products(callback: types.CallbackQuery) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏.

    Args:
        callback: –û–±—ä–µ–∫—Ç callback_query, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                 –≤ —Ñ–æ—Ä–º–∞—Ç–µ "subcat_{subcategory_id}"
    """
    user_id = callback.from_user.id
    subcategory_id = int(callback.data.split("_")[1])

    async def process_subcategory():
        try:
            await show_products(callback, subcategory_id=subcategory_id)
        except Exception as e:
            logger.error(
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ID:{subcategory_id}, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID:{user_id}: {e}")
            raise

    await safe_callback_execution(
        callback,
        process_subcategory,
        "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–æ–≤–∞—Ä–æ–≤"
    )
