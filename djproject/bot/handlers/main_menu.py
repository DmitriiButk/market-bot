from typing import List, Dict, Any

from aiogram import types, Router, F
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from .. import db


main_menu_router = Router()


def get_main_menu_kb() -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é.

    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –∫–∞—Ç–∞–ª–æ–≥—É —Ç–æ–≤–∞—Ä–æ–≤,
    –∫–æ—Ä–∑–∏–Ω–µ –∏ —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–º –≤–æ–ø—Ä–æ—Å–∞–º.

    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    """
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üõçÔ∏è –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤", callback_data="catalog")],
            [InlineKeyboardButton(text="üõí –ö–æ—Ä–∑–∏–Ω–∞", callback_data="cart")],
            [InlineKeyboardButton(text="‚ùì FAQ", callback_data="faq")]
        ]
    )


def get_main_menu_button_kb() -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.

    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–∞—Ö –¥–ª—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –±–æ—Ç–∞.

    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    """
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
    )


@main_menu_router.callback_query(lambda c: c.data == "main_menu")
async def main_menu(callback: types.CallbackQuery) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é.

    –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∑–∞–º–µ–Ω—è—è –µ–≥–æ –Ω–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é.

    Args:
        callback: –û–±—ä–µ–∫—Ç callback_query –æ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    """
    await callback.message.edit_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_menu_kb()
    )
    await callback.answer()


@main_menu_router.callback_query(lambda c: c.data == "faq")
async def show_faq(callback: types.CallbackQuery) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.

    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ FAQ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é
    —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –Ω–∞–∂–∞—Ç—å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç–≤–µ—Ç–æ–≤.

    Args:
        callback: –û–±—ä–µ–∫—Ç callback_query –æ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É FAQ
    """
    faqs: List[Dict[str, Any]] = await db.get_faq()

    if not faqs:
        await callback.message.edit_text(
            "–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤.",
            reply_markup=get_main_menu_button_kb()
        )
        await callback.answer()
        return

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
                            [InlineKeyboardButton(text=faq['question'], callback_data=f"faq_{faq['id']}")]
                            for faq in faqs
                        ] + [
                            [InlineKeyboardButton(text="–ó–∞–¥–∞—Ç—å —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å", callback_data="ask_question")],
                            [InlineKeyboardButton(text="üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="main_menu")]
                        ]
    )

    await callback.message.edit_text("–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã:", reply_markup=kb)
    await callback.answer()


@main_menu_router.message(F.text == "FAQ")
async def menu_faq(message: types.Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã "FAQ" –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.

    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ FAQ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏.
    –ï—Å–ª–∏ –≤ –±–∞–∑–µ –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤, —É–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± —ç—Ç–æ–º.

    Args:
        message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    faqs: List[Dict[str, Any]] = await db.get_faq()

    if not faqs:
        await message.answer(
            "–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤.",
            reply_markup=get_main_menu_button_kb()
        )
        return

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
                            [InlineKeyboardButton(text=faq['question'], callback_data=f"faq_{faq['id']}")]
                            for faq in faqs
                        ] + [
                            [InlineKeyboardButton(text="–ó–∞–¥–∞—Ç—å —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å", callback_data="ask_question")],
                            [InlineKeyboardButton(text="üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="main_menu")]
                        ]
    )

    await message.answer("–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã:", reply_markup=kb)
